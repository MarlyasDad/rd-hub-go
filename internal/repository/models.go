// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type VpBackendFilesTypeEnum string

const (
	VpBackendFilesTypeEnumDoc  VpBackendFilesTypeEnum = "doc"
	VpBackendFilesTypeEnumDocx VpBackendFilesTypeEnum = "docx"
	VpBackendFilesTypeEnumPdf  VpBackendFilesTypeEnum = "pdf"
	VpBackendFilesTypeEnumPng  VpBackendFilesTypeEnum = "png"
	VpBackendFilesTypeEnumJpg  VpBackendFilesTypeEnum = "jpg"
	VpBackendFilesTypeEnumJpeg VpBackendFilesTypeEnum = "jpeg"
)

func (e *VpBackendFilesTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VpBackendFilesTypeEnum(s)
	case string:
		*e = VpBackendFilesTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for VpBackendFilesTypeEnum: %T", src)
	}
	return nil
}

type NullVpBackendFilesTypeEnum struct {
	VpBackendFilesTypeEnum VpBackendFilesTypeEnum
	Valid                  bool // Valid is true if VpBackendFilesTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVpBackendFilesTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.VpBackendFilesTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VpBackendFilesTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVpBackendFilesTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VpBackendFilesTypeEnum), nil
}

type VpBackendUsersStatusEnum string

const (
	VpBackendUsersStatusEnumActive   VpBackendUsersStatusEnum = "active"
	VpBackendUsersStatusEnumDisabled VpBackendUsersStatusEnum = "disabled"
)

func (e *VpBackendUsersStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VpBackendUsersStatusEnum(s)
	case string:
		*e = VpBackendUsersStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for VpBackendUsersStatusEnum: %T", src)
	}
	return nil
}

type NullVpBackendUsersStatusEnum struct {
	VpBackendUsersStatusEnum VpBackendUsersStatusEnum
	Valid                    bool // Valid is true if VpBackendUsersStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVpBackendUsersStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.VpBackendUsersStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VpBackendUsersStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVpBackendUsersStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VpBackendUsersStatusEnum), nil
}

type File struct {
	ID           int64
	UserID       int64
	ParentID     pgtype.Int8
	AttachmentID string
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
	DeletedAt    pgtype.Timestamp
	Name         string
	OriginalName string
	Type         VpBackendFilesTypeEnum
	Ocr          []byte
}

type User struct {
	ID         int64
	KeycloakID pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	DeletedAt  pgtype.Timestamp
	Email      pgtype.Text
	Status     VpBackendUsersStatusEnum
}
